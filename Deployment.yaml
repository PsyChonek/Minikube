# WEB
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: danvazy/minikube_web:latest
          imagePullPolicy: Always # Always pull the image from the registry // Not required if you are using :latest tag
          ports:
            - containerPort: 3000
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
      restartPolicy: Always
---
# Expose the deployment as a service
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  type: LoadBalancer
  ports:
    - port: 3000 # Port on the Service (how you access the service)
      targetPort: 80 # Port on the container (where the application is running)
  selector:
    app: web
---
# Deployment API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: danvazy/minikube_api:latest
          imagePullPolicy: Always # Always pull the image from the registry // Not required if you are using :latest tag
          ports:
            - containerPort: 3000
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
      restartPolicy: Always
---
# Auto scale the deployment
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: api
spec:
  maxReplicas: 10
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  targetCPUUtilizationPercentage: 50
---
# Expose the deployment as a service
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  type: LoadBalancer
  ports:
    - port: 3001 # Port on the Service (how you access the service)
      targetPort: 3000 # Port on the container (where the application is running)
  selector:
    app: api
